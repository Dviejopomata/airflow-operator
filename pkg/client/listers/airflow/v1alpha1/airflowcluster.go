/*
Copyright 2018 Google LLC
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "k8s.io/airflow-operator/pkg/apis/airflow/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AirflowClusterLister helps list AirflowClusters.
type AirflowClusterLister interface {
	// List lists all AirflowClusters in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AirflowCluster, err error)
	// AirflowClusters returns an object that can list and get AirflowClusters.
	AirflowClusters(namespace string) AirflowClusterNamespaceLister
	AirflowClusterListerExpansion
}

// airflowClusterLister implements the AirflowClusterLister interface.
type airflowClusterLister struct {
	indexer cache.Indexer
}

// NewAirflowClusterLister returns a new AirflowClusterLister.
func NewAirflowClusterLister(indexer cache.Indexer) AirflowClusterLister {
	return &airflowClusterLister{indexer: indexer}
}

// List lists all AirflowClusters in the indexer.
func (s *airflowClusterLister) List(selector labels.Selector) (ret []*v1alpha1.AirflowCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AirflowCluster))
	})
	return ret, err
}

// AirflowClusters returns an object that can list and get AirflowClusters.
func (s *airflowClusterLister) AirflowClusters(namespace string) AirflowClusterNamespaceLister {
	return airflowClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AirflowClusterNamespaceLister helps list and get AirflowClusters.
type AirflowClusterNamespaceLister interface {
	// List lists all AirflowClusters in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.AirflowCluster, err error)
	// Get retrieves the AirflowCluster from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.AirflowCluster, error)
	AirflowClusterNamespaceListerExpansion
}

// airflowClusterNamespaceLister implements the AirflowClusterNamespaceLister
// interface.
type airflowClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AirflowClusters in the indexer for a given namespace.
func (s airflowClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AirflowCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AirflowCluster))
	})
	return ret, err
}

// Get retrieves the AirflowCluster from the indexer for a given namespace and name.
func (s airflowClusterNamespaceLister) Get(name string) (*v1alpha1.AirflowCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("airflowcluster"), name)
	}
	return obj.(*v1alpha1.AirflowCluster), nil
}
