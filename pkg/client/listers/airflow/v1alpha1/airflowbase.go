/*
Copyright 2018 Google LLC
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "k8s.io/airflow-operator/pkg/apis/airflow/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AirflowBaseLister helps list AirflowBases.
type AirflowBaseLister interface {
	// List lists all AirflowBases in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AirflowBase, err error)
	// AirflowBases returns an object that can list and get AirflowBases.
	AirflowBases(namespace string) AirflowBaseNamespaceLister
	AirflowBaseListerExpansion
}

// airflowBaseLister implements the AirflowBaseLister interface.
type airflowBaseLister struct {
	indexer cache.Indexer
}

// NewAirflowBaseLister returns a new AirflowBaseLister.
func NewAirflowBaseLister(indexer cache.Indexer) AirflowBaseLister {
	return &airflowBaseLister{indexer: indexer}
}

// List lists all AirflowBases in the indexer.
func (s *airflowBaseLister) List(selector labels.Selector) (ret []*v1alpha1.AirflowBase, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AirflowBase))
	})
	return ret, err
}

// AirflowBases returns an object that can list and get AirflowBases.
func (s *airflowBaseLister) AirflowBases(namespace string) AirflowBaseNamespaceLister {
	return airflowBaseNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AirflowBaseNamespaceLister helps list and get AirflowBases.
type AirflowBaseNamespaceLister interface {
	// List lists all AirflowBases in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.AirflowBase, err error)
	// Get retrieves the AirflowBase from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.AirflowBase, error)
	AirflowBaseNamespaceListerExpansion
}

// airflowBaseNamespaceLister implements the AirflowBaseNamespaceLister
// interface.
type airflowBaseNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AirflowBases in the indexer for a given namespace.
func (s airflowBaseNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AirflowBase, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AirflowBase))
	})
	return ret, err
}

// Get retrieves the AirflowBase from the indexer for a given namespace and name.
func (s airflowBaseNamespaceLister) Get(name string) (*v1alpha1.AirflowBase, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("airflowbase"), name)
	}
	return obj.(*v1alpha1.AirflowBase), nil
}
